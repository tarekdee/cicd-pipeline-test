name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    branches:
      - main
jobs:
  # Explore-GitHub-Actions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
  build-and-deploy:
      runs-on: ubuntu-latest
      steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Use the Node.js version your project requires

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build the project
      - name: Build the project
        run: npm run build

      # Step 5: Pulumi deployments
      - name: Trigger Pulumi Preview
        id: preview
        run: |
          curl -X POST "https://api.pulumi.com/api/stacks/aenetworks/cicd-pipeline-test/dev/deployments" \
            -H "Authorization: token ${{ secrets.PULUMI_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg stackName "${{ secrets.STACK_NAME }}" \
                  --arg domainName "${{ secrets.DOMAIN_NAME }}" \
                  --arg rootDomainName "${{ secrets.ROOT_DOMAIN_NAME }}" \
                  --arg hostedZoneId "${{ secrets.HOSTED_ZONE_ID }}" \
                  --arg env "${{ secrets.ENV }}" \
                  --arg appId "${{ secrets.APP_ID }}" \
                  --arg region "${{ secrets.REGION }}" \
                  '{
                    "operation": "preview",
                    "operationContext": {
                      "preRunCommands": [
                        "pulumi stack select \($stackName)",
                        "pulumi config set cicd-pipeline-test:domainName \($domainName)",
                        "pulumi config set cicd-pipeline-test:rootDomainName \($rootDomainName)",
                        "pulumi config set cicd-pipeline-test:hostedZoneId \($hostedZoneId)",
                        "pulumi config set cicd-pipeline-test:environment \($env)",
                        "pulumi config set cicd-pipeline-test:applicationID \($appId)", 
                        "pulumi config set aws:region \($region)"
                      ]
                    }
                  }')"

      - name: Trigger Pulumi Up
        run: |
          curl -X POST "https://api.pulumi.com/api/stacks/aenetworks/cicd-pipeline-test/dev/deployments" \
            -H "Authorization: token ${{ secrets.PULUMI_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg stackName "${{ secrets.STACK_NAME }}" \
                  --arg domainName "${{ secrets.DOMAIN_NAME }}" \
                  --arg rootDomainName "${{ secrets.ROOT_DOMAIN_NAME }}" \
                  --arg hostedZoneId "${{ secrets.HOSTED_ZONE_ID }}" \
                  --arg env "${{ secrets.ENV }}" \
                  --arg appId "${{ secrets.APP_ID }}" \
                  --arg region "${{ secrets.REGION }}" \
                  '{
                    "operation": "update",
                    "operationContext": {
                      "preRunCommands": [
                        "pulumi stack select \($stackName)",
                        "pulumi config set cicd-pipeline-test:domainName \($domainName)",
                        "pulumi config set cicd-pipeline-test:rootDomainName \($rootDomainName)",
                        "pulumi config set cicd-pipeline-test:hostedZoneId \($hostedZoneId)",
                        "pulumi config set cicd-pipeline-test:environment \($env)",
                        "pulumi config set cicd-pipeline-test:applicationID \($appId)", 
                        "pulumi config set aws:region \($region)"
                      ]
                    }
                  }')"
     
