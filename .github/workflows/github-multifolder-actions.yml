name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on:
  push:
    branches:
      - main
jobs:
  # Explore-GitHub-Actions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
  build-and-deploy-dev-folder:
      runs-on: ubuntu-latest
      steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Identify changed files
      - name: Check for changes in dev folder
        id: check-dev-changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          echo "Changed files: $CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep "^dev/" > /dev/null; then
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
          else
            echo "CHANGES_DETECTED=false" >> $GITHUB_ENV
          fi

      - name: Skip job if no dev folder changes
        if: env.CHANGES_DETECTED == 'false'
        run: |
          echo "No changes detected in dev/, skipping job."
          exit 1

      # Step 1.0.1 Move to the working directory dev
      - name: Move to dev folder
        run: cd dev && ls && echo "Now in dev folder"

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Use the Node.js version your project requires

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build the project
      - name: Build the project
        run: npm run build

      #Step 5: Pulumi deployments
      - name: Trigger Pulumi Preview
        id: preview
        run: |
          curl -X POST "https://api.pulumi.com/api/stacks/aenetworks/cicd-pipeline-test/dev/deployments" \
            -H "Authorization: token ${{ secrets.PULUMI_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg stackName "${{ secrets.STACK_NAME }}" \
              '{
                "operation": "preview",
                "sourceContext": {
                  "git": {
                    "repoDir": "dev/devops/experimental/cf-html-website"
                  }
                },
                "operationContext": {
                  "preRunCommands": [
                    "pulumi stack select \($stackName)",
                    "pulumi config refresh --force"
                  ]
                }
              }')"

      - name: Trigger Pulumi Up
        run: |
          curl -X POST "https://api.pulumi.com/api/stacks/aenetworks/cicd-pipeline-test/dev/deployments" \
            -H "Authorization: token ${{ secrets.PULUMI_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg stackName "${{ secrets.STACK_NAME }}" \
              '{
                "operation": "update",
                "sourceContext": {
                  "git": {
                    "repoDir": "dev/devops/experimental/cf-html-website"
                  }
                },
                "operationContext": {
                  "preRunCommands": [
                    "pulumi stack select \($stackName)",
                    "pulumi config refresh --force"
                  ]
                }
              }')"
              

  build-and-deploy-prod-folder:
      runs-on: ubuntu-latest
      steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Identify changed files
      - name: Check for changes in dev folder
        id: check-dev-changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          echo "Changed files: $CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep "^prod/" > /prod/null; then
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
          else
            echo "CHANGES_DETECTED=false" >> $GITHUB_ENV
          fi

      - name: Skip job if no dev folder changes
        if: env.CHANGES_DETECTED == 'false'
        run: |
          echo "No changes detected in prod/, skipping job."
          exit 1

      # Step 1.0.1 Move to the working directory prod
      - name: Move to prod folder
        run: cd prod && ls && echo "Now in prod folder"

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Use the Node.js version your project requires

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build the project
      - name: Build the project
        run: npm run build

      #Step 5: Pulumi deployments
      - name: Trigger Pulumi Preview
        id: preview
        run: |
          curl -X POST "https://api.pulumi.com/api/stacks/aenetworks/cicd-pipeline-test/dev/deployments" \
            -H "Authorization: token ${{ secrets.PULUMI_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg stackName "${{ secrets.STACK_NAME }}" \
              '{
                "operation": "preview",
                "sourceContext": {
                  "git": {
                    "repoDir": "prod/devops/experimental/cf-html-website"
                  }
                },
                "operationContext": {
                  "preRunCommands": [
                    "pulumi stack select \($stackName)",
                    "pulumi config refresh --force"
                  ]
                }
              }')"

      - name: Trigger Pulumi Up
        run: |
          curl -X POST "https://api.pulumi.com/api/stacks/aenetworks/cicd-pipeline-test/dev/deployments" \
            -H "Authorization: token ${{ secrets.PULUMI_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg stackName "${{ secrets.STACK_NAME }}" \
              '{
                "operation": "update",
                "sourceContext": {
                  "git": {
                    "repoDir": "prod/devops/experimental/cf-html-website"
                  }
                },
                "operationContext": {
                  "preRunCommands": [
                    "pulumi stack select \($stackName)",
                    "pulumi config refresh --force"
                  ]
                }
              }')"
    
